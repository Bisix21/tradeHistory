Огляд
Створення веб-сайту для ведення фінансової звітності для користувачів. Кожен користувач може додавати свої доходи та витрати, а також переглядати свою фінансову статистику.

Функціональні вимоги
Реєстрація та авторизація:

Користувачі повинні мати можливість реєстрації та авторизації на сайті.

--Додавання транзакцій:
Користувачі можуть додавати нові транзакції (доходи або витрати).
Кожна транзакція повинна містити поля: тип (дохід/витрата), сума, дата та опис.

Виведення фінансової статистики:
Кожен користувач може переглядати свою фінансову статистику.
Загальна сума доходів та витрат.
Графіки або діаграми для кращого візуального представлення фінансової активності.

--Редагування та видалення транзакцій:
Користувачі можуть редагувати та видаляти свої транзакції.

Математичні формули
Розрахунок доходу:
Для обчислення загального доходу користувача: Загальний дохід = Σ (сума всіх доходів).

Розрахунок витрат:
Для обчислення загальних витрат користувача: Загальні витрати = Σ (сума всіх витрат).

Розрахунок балансу:
Баланс користувача: Баланс = Загальний дохід - Загальні витрати.

Структура бази даних

Таблиця "Користувачі" (users):
id (PRIMARY KEY, AUTO_INCREMENT)
username (VARCHAR)
email (VARCHAR)
password (VARCHAR)

Таблиця "Транзакції" (transactions):
id (PRIMARY KEY, AUTO_INCREMENT)
user_id (FOREIGN KEY з users)
type (ENUM: 'income' або 'expense')
amount (FLOAT)
description (TEXT)
date (DATETIME)

Технічні деталі

Використання Symfony Framework:
Використовуйте Symfony для створення та управління різними компонентами сайту.

Інтерфейс користувача:
Створіть зручний та інтуїтивно зрозумілий інтерфейс для користувачів.
Безпека:

Забезпечте безпеку реєстрації та авторизації користувачів, використовуючи Symfony Security Component.

Графічний інтерфейс:
Використовуйте Symfony Form Component для створення форм для додавання та редагування транзакцій.

База даних:
Використовуйте Doctrine ORM для взаємодії з базою даних та збереження даних користувачів та їх транзакцій.

Діаграма класів:
Створіть діаграму класів для Symfony, щоб зрозуміти взаємозв'язки між класами та компонентами.